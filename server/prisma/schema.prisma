// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id       String     @id @default(uuid()) @map("id")
  email    String     @unique
  username String     @unique
  bio      String?
  avatar   String?
  posts    Post[]     @relation("UserPosts")
  Likes    Likes[]    @relation("UserLikes")
  Comments Comments[] @relation("AuthorComment")

  followers Follows[] @relation("Followed")
  following Follows[] @relation("Following")

  sentNotifications     Notification[] @relation("NotificationNotifier")
  receivedNotifications Notification[] @relation("NotificationReceiver")

  @@index([username])
  @@index([email])
  @@map("users")
}

model Post {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  caption    String?

  user_id String
  poster  User   @relation("UserPosts", fields: [user_id], references: [id])

  likes    Likes[]    @relation("PostLikes")
  comments Comments[] @relation("PostComments")

  images       Images[]       @relation("PostImages")
  Notification Notification[]

  @@map("posts")
}

model Images {
  id      Int    @id @default(autoincrement())
  url     String
  post_id Int
  post    Post   @relation("PostImages", fields: [post_id], references: [id])
  index   Int
}

model Likes {
  id      Int    @id @default(autoincrement())
  post_id Int
  user_id String

  created_at   DateTime       @default(now())
  user         User           @relation("UserLikes", fields: [user_id], references: [id])
  post         Post           @relation("PostLikes", fields: [post_id], references: [id])
  Notification Notification[]
}

model Comments {
  id      Int    @id @default(autoincrement())
  post_id Int
  user_id String
  comment String

  created_at   DateTime       @default(now())
  user         User           @relation("AuthorComment", fields: [user_id], references: [id])
  post         Post           @relation("PostComments", fields: [post_id], references: [id])
  Notification Notification[]
}

model Follows {
  id Int @id @default(autoincrement())

  follower_id String
  followed_id String

  create_at DateTime @default(now())
  followed  User     @relation("Followed", fields: [followed_id], references: [id])
  following User     @relation("Following", fields: [follower_id], references: [id])

  @@unique([follower_id, followed_id])
}

model Notification {
  id          Int              @id @default(autoincrement())
  type        NotificationType
  notifier_id String
  user_id     String?

  post_id    Int?
  like_id    Int?
  comment_id Int?

  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  notifier User  @relation("NotificationNotifier", fields: [notifier_id], references: [id])
  user     User? @relation("NotificationReceiver", fields: [user_id], references: [id])

  post    Post?     @relation(fields: [post_id], references: [id])
  like    Likes?    @relation(fields: [like_id], references: [id])
  comment Comments? @relation(fields: [comment_id], references: [id])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MENTION
}
